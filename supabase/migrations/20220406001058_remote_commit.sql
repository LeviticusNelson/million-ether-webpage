-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.generate_pixels()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
  declare
    pixel_id bigint := 0;
    image_id_var bigint;
    max integer;
    w integer := new.width;
    h integer := new.height;
  begin
      
    max := w * h;
    image_id_var := new.id;
    
    while pixel_id < max loop
      insert into "Pixels"(id, image_id, is_blank, r, g, b)
        values (pixel_id, image_id_var, true, 255, 255, 255);
      pixel_id := pixel_id + 1;
    end loop;
    return new;
  end;
$BODY$;

ALTER FUNCTION public.generate_pixels()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.generate_pixels() TO anon;

GRANT EXECUTE ON FUNCTION public.generate_pixels() TO postgres;

GRANT EXECUTE ON FUNCTION public.generate_pixels() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.generate_pixels() TO authenticated;

GRANT EXECUTE ON FUNCTION public.generate_pixels() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.generate_pixels() TO service_role;

CREATE OR REPLACE FUNCTION public.recent_date()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
  begin
    new.last_change := timezone('UTC', now())::timestamp;
    return new;
  end;
$BODY$;

ALTER FUNCTION public.recent_date()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.recent_date() TO anon;

GRANT EXECUTE ON FUNCTION public.recent_date() TO postgres;

GRANT EXECUTE ON FUNCTION public.recent_date() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.recent_date() TO authenticated;

GRANT EXECUTE ON FUNCTION public.recent_date() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.recent_date() TO service_role;

CREATE OR REPLACE FUNCTION public.remove_pixels()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
  begin
    delete from "Pixels" where image_id = old.id;
    return old;
  end;
$BODY$;

ALTER FUNCTION public.remove_pixels()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.remove_pixels() TO anon;

GRANT EXECUTE ON FUNCTION public.remove_pixels() TO postgres;

GRANT EXECUTE ON FUNCTION public.remove_pixels() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.remove_pixels() TO authenticated;

GRANT EXECUTE ON FUNCTION public.remove_pixels() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.remove_pixels() TO service_role;

CREATE TABLE IF NOT EXISTS public."Images"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    width integer NOT NULL DEFAULT 50,
    height integer NOT NULL DEFAULT 50,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT "Images_pkey" PRIMARY KEY (id),
    CONSTRAINT "Images_id_key" UNIQUE (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Images"
    OWNER to supabase_admin;

GRANT ALL ON TABLE public."Images" TO anon;

GRANT ALL ON TABLE public."Images" TO authenticated;

GRANT ALL ON TABLE public."Images" TO postgres;

GRANT ALL ON TABLE public."Images" TO service_role;

GRANT ALL ON TABLE public."Images" TO supabase_admin;

CREATE TRIGGER create_pixels_for_image
    AFTER INSERT
    ON public."Images"
    FOR EACH ROW
    EXECUTE FUNCTION public.generate_pixels();

CREATE TRIGGER remove_pixels_for_image
    BEFORE DELETE
    ON public."Images"
    FOR EACH ROW
    EXECUTE FUNCTION public.remove_pixels();

CREATE TABLE IF NOT EXISTS public."Pixels"
(
    id bigint NOT NULL DEFAULT '0'::bigint,
    image_id bigint NOT NULL DEFAULT '0'::bigint,
    is_blank boolean NOT NULL DEFAULT true,
    r smallint NOT NULL DEFAULT '255'::smallint,
    g smallint NOT NULL DEFAULT '255'::smallint,
    b smallint NOT NULL DEFAULT '255'::smallint,
    last_user uuid,
    last_change timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text),
    CONSTRAINT "Pixels_pkey" PRIMARY KEY (image_id, id),
    CONSTRAINT "Pixels_image_id_fkey" FOREIGN KEY (image_id)
        REFERENCES public."Images" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Pixels_last_user_fkey" FOREIGN KEY (last_user)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Pixels"
    OWNER to supabase_admin;

GRANT ALL ON TABLE public."Pixels" TO anon;

GRANT ALL ON TABLE public."Pixels" TO authenticated;

GRANT ALL ON TABLE public."Pixels" TO postgres;

GRANT ALL ON TABLE public."Pixels" TO service_role;

GRANT ALL ON TABLE public."Pixels" TO supabase_admin;

COMMENT ON COLUMN public."Pixels".last_user
    IS 'Last user to edit pixel';

COMMENT ON COLUMN public."Pixels".last_change
    IS 'Last edit to pixel';

CREATE TRIGGER update_timestamp
    BEFORE UPDATE 
    ON public."Pixels"
    FOR EACH ROW
    EXECUTE FUNCTION public.recent_date();
